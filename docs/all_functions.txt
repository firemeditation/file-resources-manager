frmPkg/ga.go

    // GetConfig 为获取配置文件信息，接收"server"、"client"，未来支持"web"
	func GetConfig(sorc string) *goconfig.ConfigFile
	
	// 一套int类型和[]byte类型间的相互转换
	func Uint64ToBytes(i uint64) []byte
	func BytesToUint64(buf []byte) uint64
	func Uint32ToBytes(i uint32) []byte
	func BytesToUint32(buf []byte) uint32
	func Uint16ToBytes(i uint16) []byte
	func BytesToUint16(buf []byte) uint16
	func Uint8ToBytes(i uint8) []byte
	func BytesToUint8(buf []byte) uint8
	
	// GetSha1 生成SHA1值
	func GetSha1(data string) string
	
	// ReadSocketToFile 从soket读出文件，用带缓冲的方式写入文件里
    func ReadSocketToFile(conn net.Conn, len uint64, file *os.File) (err error)

    // ReadSocketBytes 从socket读出一定长度的数据，放入[]byte中，保证完整读出
    func ReadSocketBytes(conn net.Conn, len uint64) (returnByte []byte, err error)

    // SendSocketBytes 向Socket发送信息
    func SendSocketBytes (conn *net.TCPConn, bytes []byte, len uint64) error


frmPkg/userLoginInfo.go

    //UserPower 用户具体权限为[权限大类][权限小类]权限级别
    type UserPower map[string]map[string]uint16
    
    //AddPower 增加一个Power值
	func (up UserPower) Add (key1, key2 string, value uint8)
	
	// CheckPowerLevel 检查UPower的权限
	func (up UserPower) CheckPowerLevel (topp string, secp string, asklevel uint8) bool

	// UpdatePowerLevel 更新UserPower的值
	func (up UserPower) UpdatePowerLevel (topp string, secp string, asklevel uint8)
	

    // IsLoginInfo 是一个记录单个已经登录的人员信息的表
	type IsLoginInfoBasic struct {
		Id uint32  //用户ID
		Name string //用户名
		GroupId uint16 //所在组ID
		UnitId uint16 //所在机构id
		UnitName string //所在机构名称
		UPower UserPower
	}

	type IsLoginInfo struct {
		IsLoginInfoBasic
		LastTime time.Time
	}

	// NewIsLoginInfo 是初始化一个人员信息，必须给定name, level, lastTime
	func NewIsLoginInfo(id uint32, name string, groupid uint16, unitid uint16, unitname string, lastTime time.Time) *IsLoginInfo

	// NotTimeOut 根据给定的int类型的秒数，判断登录是否已经超时，没超时返回true，超时返回false
	func (ili *IsLoginInfo) NotTimeOut (timeout int64) bool

	// UpdateLastTime 已当前时间写入LastTime中进行更新，并返回写入的时间
	func (ili *IsLoginInfo) UpdateLastTime () time.Time

	// UserIsLogin 是一个map，记录所有已经登录的人员信息
	type UserIsLogin map[string]*IsLoginInfo

	// NewUserIsLogin 初始化UserIsLogin的map
	func NewUserIsLogin () UserIsLogin

	// Add 增加一条用户信息，返回响应的IsLoginInfo，如果ckcode重复，则返回错误
	func (uil UserIsLogin) Add (ckcode string, id uint32, name string, groupid uint16, unitid uint16, unitname string, lastTime time.Time) (ili *IsLoginInfo, err error)

	// Get 获得ckode的用户登录信息，如果err不为nil则为找不到
	func (uil UserIsLogin) Get (ckcode string) (ili *IsLoginInfo, err error)

	// Del 删除一条用户信息，通常是在其过期之后
	func (uil UserIsLogin) Del (ckcode string)

	// SelfLoginInfo 客户端使用
	type SelfLoginInfo struct {
		IsLoginInfoBasic
		SID string
	}

	func NewSelfLoginInfo (id uint32, name string, groupid uint16 , unitid uint16, unitname string, sid string) *SelfLoginInfo



frmPkg/structAndGobAndBytes.go

	// StructGobBytes 将结构体数据转成Gob再转成[]Byte
	func StructGobBytes(e interface{}) []byte

	// BytesGobStruct 将[]byte转成Gob再转成结构体
	func BytesGobStruct(f_b []byte, stur interface{})
	
frmPkg/structAndJson.go

	// StructToJson 将结构体转成Json的字符串
	func StructToJson(e interface{}) string
	
	// JsonToStruct 将json的字符串转成结构体
	func JsonToStruct(f_b string, stur interface{})



frmPkg/editLock.go

	//EditLock 为编辑锁
	type EditLock map[string]*sync.RWMutex
	func NewEditLock () EditLock
	func (el EditLock) Lock (ck string)
	func (el EditLock) RLock (ck string)
	func (el EditLock) Unlock (ck string)
	func (el EditLock) RUnlock (ck string)



frmClient/public.go

	//sendTheFirstRequest 发送版本号和请求操作的类型
	func sendTheFirstRequest (version , retype uint8, conn *net.TCPConn) error

	//connectServer 根据配置文件地址连接服务器
	func connectServer() *net.TCPConn
	
	//clearScreen 清空屏幕内容
	func clearScreen()



frmServer/frmServer.go

	// getFirstRequest 获取版本号和请求操作的类型
	func getFirstRequest(conn *net.TCPConn) (ver, vtype uint8)



frmServer/public.go

	// mergePower 根据Unit、Group、User中的权限合并出最大值
	func mergePower(p1, p2, p3 UserPower) UserPower
	
	// mergePowerAss 为mergePower的辅助函数
	func mergePowerAss(p1, p2 UserPower) UserPower
	
	// ckLogedUser 检查已经登录的用户是否存在，或者是否登录超时
	func ckLogedUser (ckcode string) (ili *IsLoginInfo, ok bool)




github.com/msbranco/goconfig/configfile.go

	func ReadConfigFile(fname string) (*ConfigFile, error)
	func (c *ConfigFile) GetSections() (sections []string)
	func (c *ConfigFile) HasSection(section string) bool
	func (c *ConfigFile) GetOptions(section string) ([]string, error)
	func (c *ConfigFile) HasOption(section string, option string) bool
	func (c *ConfigFile) GetRawString(section string, option string) (string, error)
	func (c *ConfigFile) GetString(section string, option string) (string, error)
	func (c *ConfigFile) GetInt64(section string, option string) (int64, error)
	func (c *ConfigFile) GetFloat(section string, option string) (float64, error)
	func (c *ConfigFile) GetBool(section string, option string) (bool, error)
